/*Создать функцию, которая принимает настройки и возвращает таймер

Настройки включают
- интервал (в секундах)
- количество срабатываний
- обработчик во время срабатывания таймера
- обработчик после завершения всех повторений

Таймер включает
- информацию о сохранённых настройках интервала и количества срабатываний
- запущен ли
- функцию запуска (можно указать новый интервал и количество срабатываний)
- функцию остановки)
Настройки включают: 
1.1) вводят интервал, через которое будет выводится таймер
2.1) вводят сколько раз будет выводится
3) когда срабатывает таймер(если больше 1), то выводится сообщение, что таймер номер n сработал
4) когда срабатывает последний таймер, то выводится сообщение, что все таймеры сработали
Таймер включает
1) выводится в консоль, что было написано(1.1) и кол-о срабатываний(2.1) 
2) можно переопределить количество срабатываний(можно сделать в одно для выбора нового или остановки)
*/

import { createTimer } from "./timer"

// таймер на 10 сек, каждые 2 секунды выводить номер итерации с первого запуска, в конце написать "конец"
// через 5 сек остановить таймер (+ вывести статистику)
// ещё через 1 сек запустить таймер заново
// в конце снова вывести статистику
// статистика: запущен ли таймер, количество срабатываний с последнего запуска

const seconds = 2 // +input('seconds: ') // 2
const quantity = 5 // +input('quantity: ') // 5

let allIterationsCount = 0

const checkTimerStatus = () => print(`${timer.isActive === true ? 'таймер работает' : 'таймер выключен'}`)

const timer = createTimer({
	seconds,
	quantity,
	onTimeout: (i) => {
		checkTimerStatus() // !
		allIterationsCount++
		print(`Запуск №${i}, всего выполнилось ${allIterationsCount} срабатываний`)
	},
	onFinish: () => {
		checkTimerStatus()
		print(`Последняя остановка, количество срабатываний: ${allIterationsCount}`)
	}
})

timer.stop() // !

timer.start()

// timer.isActive = false

if (timer.isActive) {
	print('Таймер запущен')
}

setTimeout(
	() => {
		timer.stop()
		checkTimerStatus()
		print(`Первое прерывание, количество срабатываний: ${allIterationsCount}`)
		setTimeout(
			() => {
				timer.start()
			},
			1000
		)
	},
	5000
)



